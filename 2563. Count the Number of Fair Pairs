import java.util.Arrays;

class Solution {
    public long countFairPairs(int[] nums, int lower, int upper) {
        Arrays.sort(nums);
        long count = 0;
        int n = nums.length;
        
        for (int r = 1; r < n; r++) {
            int leftBound = findLowerBound(nums, 0, r - 1, lower - nums[r]);
            int rightBound = findUpperBound(nums, 0, r - 1, upper - nums[r]);
            
            if (leftBound <= rightBound) {
                count += (rightBound - leftBound + 1);
            }
        }
        
        return count;
    }
    
    private int findLowerBound(int[] nums, int start, int end, int target) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return start;
    }
    
    private int findUpperBound(int[] nums, int start, int end, int target) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] <= target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return end;
    }
}
